#!/usr/bin/python3
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import argparse
import json
import logging
import os
import rpm
import signal
import subprocess
import sys
import tempfile

from datetime import datetime
from enum import Enum


LOGGING_FILE = "/var/log/ovirt-engine/ovirt-fast-forward-upgrade.log"

RHV_40_REPOS = [
    "rhel-7-server-supplementary-rpms",
    "rhel-7-server-rpms",
    "rhel-7-server-rhv-4.0-rpms",
    "jb-eap-7.0-for-rhel-7-server-rpms"
]

RHV_41_REPOS = [
    "rhel-7-server-supplementary-rpms",
    "rhel-7-server-rpms",
    "rhel-7-server-rhv-4.1-rpms",
    "rhel-7-server-rhv-4-tools-rpms",
    "jb-eap-7.1-for-rhel-7-server-rpms"
]

RHV_42_REPOS = [
    "rhel-7-server-supplementary-rpms",
    "rhel-7-server-rpms",
    "rhel-7-server-rhv-4.2-manager-rpms",
    "rhel-7-server-rhv-4-manager-tools-rpms",
    "rhel-7-server-ansible-2.9-rpms",
    "jb-eap-7-for-rhel-7-server-rpms"
]

RHV_43_REPOS = [
    "rhel-7-server-supplementary-rpms",
    "rhel-7-server-rpms",
    "rhel-7-server-rhv-4.3-manager-rpms",
    "rhel-7-server-rhv-4-manager-tools-rpms",
    "rhel-7-server-ansible-2.9-rpms",
    "jb-eap-7.2-for-rhel-7-server-rpms"
]

RHV_44_REPOS = [
    "rhel-8-for-x86_64-baseos-rpms",
    "rhel-8-for-x86_64-appstream-rpms",
    "rhv-4-manager-beta-for-rhel-8-x86_64-rpms",
    "ansible-2.9-for-rhel-8-x86_64-rpms",
    "jb-eap-7.3-for-rhel-8-x86_64-rpms",
    "fast-datapath-for-rhel-8-x86_64-rpms"
]

# Dictionary that keep the release data like:
# version, the difference between repo_to_enable and repo_to_disable
CHECK_RELEASES = {}
CHECK_RELEASES['repos'] = [
    {
        'version': '4.0',
        'repo_to_enable': set(RHV_41_REPOS) - set(RHV_40_REPOS),
        'repo_to_disable': set(RHV_40_REPOS) - set(RHV_41_REPOS),
        'next_upgrade': '4.1',
        'cluster_level_for_next_upgrade': "'4.1', '4.0', '3.6'"
    },
    {
        'version': '4.1',
        'repo_to_enable': set(RHV_42_REPOS) - set(RHV_41_REPOS),
        'repo_to_disable': set(RHV_41_REPOS) - set(RHV_42_REPOS),
        'next_upgrade': '4.2',
        'cluster_level_for_next_upgrade': "'4.2', '4.1', '4.0', '3.6'"
    },
    {
        'version': '4.2',
        'repo_to_enable': set(RHV_43_REPOS) - set(RHV_42_REPOS),
        'repo_to_disable': set(RHV_42_REPOS) - set(RHV_43_REPOS),
        'next_upgrade': '4.3',
        'cluster_level_for_next_upgrade': "'4.3', '4.2', '4.1'"
    },
    {
        'version': '4.3',
        'repo_to_enable': set(RHV_44_REPOS) - set(RHV_43_REPOS),
        'repo_to_disable': set(RHV_43_REPOS) - set(RHV_44_REPOS),
        'next_upgrade': '4.4',
        'cluster_level_for_next_upgrade': "'4.4', '4.3', '4.2'"
    }
]


class MsgType(Enum):
    INFO = 1
    WARNING = 2
    ERROR = 3


def _configure_logging():
    """
    The logging settings
    """
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    logger.propagate = False

    fh = logging.FileHandler(LOGGING_FILE)
    fh.setLevel(logging.DEBUG)
    debug_fmt = logging.Formatter("%(asctime)s %(message)s",
                                  "%m/%d/%Y %I:%M:%S %p")

    ih = logging.StreamHandler(stream=sys.stdout)
    ih.setLevel(logging.INFO)
    info_fmt = logging.Formatter("%(message)s",
                                 "%m/%d/%Y %I:%M:%S %p")

    fh.setFormatter(debug_fmt)
    ih.setFormatter(info_fmt)

    logger.addHandler(fh)
    logger.addHandler(ih)

    logging.captureWarnings(True)


class Base(logging.Handler):
    def __init__(self):
        super(Base, self).__init__()
        self.logger = logging.getLogger(__name__)

    def print_msg(self, message, type=None):
        """
        Print message

        Parameters:
           type
               INFO - The message will be print as green
               WARNING - The message will be print as yellow

        Argument:
            message - Message to be printed with INFO note
        """

        if type == MsgType.ERROR:
            self.logger.error((
                "\033[91m[ ERROR  ]\033[00m {msg}".format(msg=message)
            ))
        elif type == MsgType.INFO:
            self.logger.info((
                "\033[92m[ INFO  ]\033[00m {msg}".format(msg=message)
            ))
        elif type == MsgType.WARNING:
            self.logger.info((
                "\033[93m[ WARNING  ]\033[00m {msg}".format(msg=message)
            ))
        else:
            self.logger.info((
                "{m}".format(m=message)
            ))

    def execute_cmd_remote_host_check_output(self, host, command):
        """
        Execute Command in a remote host and check output
        """

        key = "/etc/pki/ovirt-engine/keys/engine_id_rsa"
        if not os.path.exists(key):
            raise RuntimeError("Can't find engine private key!")

        cmd = (
            "ssh -i {key} {host} {command}".format(
                key=key, host=host, command=command)
        )
        return self.execute_cmd_check_output(cmd)

    def execute_cmd_check_output(self, command, shell=True):
        """
        Execute command returning output

        Parameters:
            command - command to be executed
            shell - True or False
                    If shell is True, the specified command will be
                    executed through the shell

        Returns: output from command or exit
        """
        # We don't need to print the SQL queries
        if "engine-db-query" not in command:
            self.print_msg(
                'Executing: {cmd}'.format(cmd=command),
                MsgType.INFO
            )

        try:
            output = subprocess.check_output(command, shell=shell)
        except subprocess.CalledProcessError as e:
            self.print_msg(
                e.output,
                MsgType.ERROR
            )
            sys.exit(2)

        self.logger.debug(output)

        return output

    def execute_cmd(self, command, shell=False):
        """
        Execute command

        Parameters:
            command - command to be executed, use ['cmd' 'argument']
            shell - True or False
                    If shell is True, the specified command will be
                    executed through the shell

        Returns: return code or exit in case of failure
        """

        cmd_str = ' '.join(command)
        self.print_msg(
            'Executing: {cmd}'.format(cmd=cmd_str),
            MsgType.INFO
        )

        p = subprocess.Popen(
            command,
            shell=shell
        )
        returncode = p.wait()

        if returncode != 0:
            self.logger.debug(
                'ATTENTION: {cmd}, return code: {ret}'.format(
                    cmd=cmd_str, ret=returncode)
            )

        return returncode


class Subscriptions(Base):
    def __init__(self):
        super(Subscriptions, self).__init__()
        self.repos = []

    def get_enabled_repos(self):
        '''
        Get enabled repos

        Returns: All enabled repos id or empty list
        '''
        self.repos = []

        rhsm_cmd = [
            'env',
            '-i',
            'LC_ALL=C',
            'subscription-manager',
            'repos',
            '--list-enabled'
        ]

        # Convert to str to be used with check_output and shell=True
        rhsm_cmd = ' '.join(rhsm_cmd)

        self.print_msg(
            'Collecting enabled repositories by subscription-manager...',
            MsgType.INFO
        )

        output_rhsm = self.execute_cmd_check_output(rhsm_cmd)

        # We need to parse output of subscription-manager, using check_output
        for line in output_rhsm.splitlines():
            if('Repo ID:' in line):
                value = line.split('Repo ID:')[1]
                self.repos.append(value.strip())

        return self.repos

    def check_rhv_repos(self, version):
        '''
        Check repositories for RHV

        Parameters:
            version: RHV version to check, example of values (str):
                4.0
                4.1
                4.2

        Returns: True or False
        '''
        self.get_enabled_repos()
        enabled = set(self.repos)

        if version == '4.0':
            required = set(RHV_40_REPOS)
        elif version == '4.1':
            required = set(RHV_41_REPOS)
        elif version == '4.2':
            required = set(RHV_42_REPOS)
        elif version == '4.3':
            required = set(RHV_43_REPOS)
        else:
            raise RuntimeError('Version parameters not supported!')

        unknown = enabled.difference(required)
        missing = required.difference(enabled)

        if missing:
            self.print_msg("The following repositories are required "
                           "for {ver}".format(ver=version), MsgType.WARNING)
            for repo in missing:
                self.print_msg(" - {repo}".format(repo=repo))

        if unknown:
            self.print_msg(
                "The following repositories are enabled and not the "
                "main repositories for RHV {ver}".format(ver=version),
                MsgType.WARNING)
            for repo in unknown:
                self.print_msg(" - {repo}".format(repo=repo))

        if missing or unknown:
            return False

        return True

    def repository(self, action, repos):
        '''
        Enable repository using subscription-manager
        Parameters:
            action
                enable  - Enable channel
                disable - Disable channel

            repos
                repos name (list)
        Returns: command output
        '''

        SUBSCRIPTION_MANAGER_CMD = [
            'env',
            '-i',
            'LC_ALL=C',
            'subscription-manager',
            'repos'
        ]

        if 'enable' == action:
            rhsm_enable_cmd = list(SUBSCRIPTION_MANAGER_CMD)
            for repo in repos:
                self.print_msg(
                    'Enabling repository: {r}'.format(r=repo),
                    MsgType.INFO
                )
                rhsm_enable_cmd.extend(['--enable', repo])

            if self.execute_cmd(rhsm_enable_cmd) != 0:
                self.print_msg(
                    'Cannot enable repository: {r}'.format(r=repo),
                    MsgType.ERROR
                )
                sys.exit(2)

        elif 'disable' == action:
            rhsm_disable_cmd = list(SUBSCRIPTION_MANAGER_CMD)
            for repo in repos:
                self.print_msg(
                    'Disabling repository: {r}'.format(r=repo),
                    MsgType.INFO
                )
                rhsm_disable_cmd.extend(['--disable', repo])

            if self.execute_cmd(rhsm_disable_cmd) != 0:
                self.print_msg(
                    'Cannot disable repository: {r}'.format(r=repo),
                    MsgType.ERROR
                )
                sys.exit(2)
        else:
            raise RuntimeError(
                "Unknown action [%s] for repositories!" % action
            )


class UpgradeHelper(Base):

    UPGRADE_CHECK = [
        'env',
        'LC_ALL=C',
        'engine-upgrade-check'
    ]

    YUM_UPDATE_CMD = [
        'env',
        'LC_ALL=C',
        'yum', 'update'
    ]

    ENGINE_SETUP = [
        'env',
        'LC_ALL=C',
        'engine-setup'
    ]

    HE_SET_MAINTENANCE_NONE = (
        "env "
        "LC_ALL=C "
        "hosted-engine "
        "--set-maintenance "
        "--mode=none"
    )

    HE_SET_MAINTENANCE_GLOBAL = (
        "env "
        "LC_ALL=C "
        "hosted-engine "
        "--set-maintenance "
        "--mode=global"
    )

    def __init__(self):
        super(UpgradeHelper, self).__init__()
        self.hosted_engine = None
        self.hosted_engine_host = None
        self.welcome_msg()
        self.major_version_engine = None

    def welcome_msg(self):

        '''
        Welcome message and supported matrix
        '''

        self.print_msg(
            "Welcome to upgrade helper!\n\n"
            "A few reminders before we start:\n\n"

            "- Make sure Engine backup is updated!\n\n"

            "- This is an incremental upgrade tool. RHV doesn't support\n"
            "  direct upgrades, example: from 4.0 directly to 4.2\n\n"

            "- Red Hat Virtualization clusters have a compatibility version.\n"
            "  The cluster compatibility version indicates the features of \n"
            "  Red Hat Virtualization supported by all of the hosts in the\n"
            "  cluster.\n\n"

            "- The cluster compatibility is set according to the version of\n"
            "  the least capable host operating system in the cluster.\n\n"

            "- To change the cluster compatibility version, you must"
            " have first\n"
            "  updated all the hosts in your cluster to a"
            " level that supports\n"
            "  your desired compatibility level. Check if there is an icon \n"
            "  next to the host indicating an update is available.\n\n"

            "+----------------------------------------------+\n"
            "| Red Hat Virtualization Manager Compatibility |\n"
            "+----------------------------------------------+\n"
            "| RHV Release | Cluster Compability Levels     |\n"
            "|----------------------------------------------|\n"
            "|   4.0       |  4.0, 3.6                      |\n"
            "|   4.1       |  4.1, 4.0, 3.6                 |\n"
            "|   4.2       |  4.2, 4.1, 4.0, 3.6            |\n"
            "|   4.3       |  4.3, 4.2, 4.1                 |\n"
            "|   4.4       |  4.3, 4.2                      |\n"
            "+----------------------------------------------+\n",
            MsgType.INFO
        )

    def is_upgrade_available(self):
        '''
        Execute engine-upgrade-check
        Returns: command return code, engine-upgrade-check returns 1 in case
        there is no upgrade. It's not like yum command that returns 1 only
        in case of error. So we return the returncode to the caller to be able
        to decide if there is upgrade or not to take the next action.
        '''
        return self.execute_cmd(self.UPGRADE_CHECK)

    def is_engine_updated(self):
        '''
        Detects versions of oVirt Engine and oVirt Engine Setup
        Returns: true is case both versions match.
        '''
        engine_package = 'ovirt-engine'
        engine_setup_package = 'ovirt-engine-setup'

        ts = rpm.TransactionSet()
        mi = ts.dbMatch()

        for package in mi:
            if package['name'] == engine_package:
                # Get the oVirt engine version
                self.version_engine = package['version']

                self.logger.debug(
                    'oVirt engine version {pkg}: {majorv}'.format(
                        pkg=engine_package, majorv=self.version_engine)
                )
            if package['name'] == engine_setup_package:
                # Get the oVirt engine setup version
                self.version_engine_setup = package['version']

                self.logger.debug(
                    'oVirt engine setup version {pkg}: {majorv}'.format(
                        pkg=engine_package, majorv=self.version_engine_setup)
                )

        if self.version_engine is None:
            self.print_msg(
                'Aborting.. unable to find {pkg} package to detect oVirt '
                'engine version...'.format(pkg=engine_package),
                MsgType.ERROR
            )
            sys.exit(2)

        if self.version_engine_setup is None:
            self.print_msg(
                'Aborting.. unable to find {pkg} package to detect oVirt '
                'engine setup version...'.format(pkg=engine_setup_package),
                MsgType.ERROR
            )
            sys.exit(2)

        return self.version_engine == self.version_engine_setup

    def upgrade_engine_setup(self):
        '''
        Look for packages with ovirt-engine-setup* name
        and execute yum update. In case of failure, exit.
        '''

        yum_update_engine_cmd = list(self.YUM_UPDATE_CMD)
        yum_update_engine_cmd.extend([
            'ovirt-engine-*setup*',
            'rh*vm-setup-plugins',
        ])

        if self.execute_cmd(yum_update_engine_cmd) != 0:
            self.print_msg(
                'Aborting.. yum update failed...',
                MsgType.ERROR
            )
            sys.exit(2)

    def check_he_running(self):
        '''
        Check if the environment is Hosted Engine
        '''
        SQL_QUERY = (
            "SELECT                           "
            "    vm_name,                     "
            "    host_name                    "
            "FROM                             "
            "    vms, vds                     "
            "WHERE                            "
            "    vms.run_on_vds=vds.vds_id AND"
            "    vms.origin = 6               "
        )
        ret = self.execute_cmd_check_output(
                'engine-db-query --json -s "{cmd}"'.format(cmd=SQL_QUERY)
        )

        if ret:
            data = json.loads(ret)
            for result in data['result']:
                for ret in result:
                    self.hosted_engine = ret['vm_name']
                    self.hosted_engine_host = ret['host_name']

    def he_set_maintenance_global(self):
        '''
        Hosted Engine - Set Maintenance Global
        '''
        self.check_he_running()
        if self.hosted_engine is not None:
            self.print_msg(
                'Hosted Engine - Setting Maintenance Global',
                MsgType.INFO
            )
            self.execute_cmd_remote_host_check_output(
                self.hosted_engine_host,
                self.HE_SET_MAINTENANCE_GLOBAL
            )

    def he_set_maintenance_none(self):
        '''
        Hosted Engine - Set Maintenance None
        '''
        self.check_he_running()
        if self.hosted_engine is not None:
            self.print_msg(
                'Hosted Engine - Setting Maintenance None',
                MsgType.INFO
            )
            self.execute_cmd_remote_host_check_output(
                self.hosted_engine_host,
                self.HE_SET_MAINTENANCE_NONE
            )

    def run_engine_setup(self):
        '''
        Execute engine-setup or exit in case of failure
        '''

        # Check if HE is running and set maint global
        self.he_set_maintenance_global()

        if self.execute_cmd(self.ENGINE_SETUP) != 0:
            self.print_msg(
                'Aborting.. engine-setup failed...',
                MsgType.ERROR
            )
            self.he_set_maintenance_none()
            sys.exit(2)

        self.he_set_maintenance_none()

    def update_system(self):
        '''
        Execute yum update or exit in case of failure
        '''
        if self.execute_cmd(self.YUM_UPDATE_CMD) != 0:
            self.print_msg(
                'Aborting.. yum update failed...',
                MsgType.ERROR
            )
            sys.exit(2)

    def detect_major_version_engine(self):
        '''
        Detect major version of oVirt Engine
        '''
        engine_package = 'ovirt-engine'

        ts = rpm.TransactionSet()
        mi = ts.dbMatch()

        for package in mi:
            if package['name'] == engine_package:
                # Get the major version
                self.major_version_engine = package['version'][:3]

                self.logger.debug(
                    'Major version {pkg}: {majorv}'.format(
                        pkg=engine_package, majorv=self.major_version_engine)
                )

        if self.major_version_engine is None:
            self.print_msg(
                'Aborting.. unable to find {pkg} package to detect major '
                'version...'.format(pkg=engine_package),
                MsgType.ERROR
            )
            sys.exit(2)

        return self.major_version_engine

    def run_engine_backup(self, dir_to_save_backup):
        '''
        Execute engine-backup before upgrade

        Arguments:
        dir_to_save_backup
            Directory to engine-backup tool save the bkp file
        '''
        engine_backup_file = '{dirbkp}/backup-engine-{date_time}'.format(
            dirbkp=dir_to_save_backup,
            date_time=datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        )

        ENGINE_BACKUP_CMD = [
            'env',
            'LC_ALL=C',
            'engine-backup',
            '--scope=all',
            '--mode=backup',
            '--file=' + engine_backup_file + '.bck',
            '--log=' + engine_backup_file + '.log'
        ]

        if self.execute_cmd(ENGINE_BACKUP_CMD) != 0:
            self.print_msg(
                'Aborting.. engine-backup failed...',
                MsgType.ERROR
            )
            sys.exit(2)

    def show_cluster_not_compatible_for_next_upgrade(self, cluster_level):
        '''
        Show cluster(s) not compatible for next upgrade

        cluster_level - Cluster Level supported in the next upgrade
        '''

        SQL_QUERY = (
            'SELECT                                       '
            '     name AS "Cluster",                      '
            '     compatibility_version AS "Compatibility"'
            ' FROM                                        '
            '     storage_pool                            '
            ' WHERE                                       '
            '    compatibility_version NOT IN ({0})'.format(cluster_level)
        )

        self.logger.debug(
            "Checking cluster(s) not compatible for next release..."
        )
        self.logger.debug(SQL_QUERY)

        ret = self.execute_cmd_check_output(
                'engine-db-query -s "{cmd}"'.format(cmd=SQL_QUERY)
        )

        return ret

    def check_cluster_compatibility_for_next_upgrade(self, cluster_level):
        '''
        Check if all clusters are compatible with next
        upgrade

        cluster_level - Cluster Level supported in the next upgrade
        '''

        SQL_QUERY = (
            "SELECT                            "
            "     name,                        "
            "     compatibility_version        "
            " FROM                             "
            "     storage_pool                 "
            " WHERE                            "
            "    compatibility_version IN ({0})".format(cluster_level)
        )

        self.logger.debug(
            "Checking for cluster compability: {0}".format(SQL_QUERY)
        )

        ret = self.execute_cmd_check_output(
                'engine-db-query --json -s "{cmd}"'.format(cmd=SQL_QUERY)
        )

        return ret

    def check_sha256(self):
        guide_link = ("https://access.redhat.com/documenta"
                      "tion/en-us/red_hat_virtualization/4.3"
                      "/html-single/upgrade_guide/index#Repl"
                      "acing_SHA-1_Certificates_with_SHA-256"
                      "_Certificates_4-1_local_db%22")
        warning_msg = ("You are using the deprecated SHA-1, "
                       "please use SHA-256 "
                       "instead: \n"
                       "sed -i 's/^default_md = sha1/default_md = sha256/'"
                       " /etc/pki/ovirt-engine/openssl.conf\n\n"
                       " See: {guide_link}".format(guide_link=guide_link))
        with open("/etc/pki/ovirt-engine/openssl.conf") as search:
            for line in search:
                if 'sha1' in line:
                    self.logger.error(warning_msg)
                    return False

        return True


def main():
    '''
    A tool to help users upgrade RHV environments
    '''
    logger = logging.getLogger(__name__)

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description='Tool to upgrade RHV environments',
        epilog='Example of use:\n%(prog)s '
    )

    parser.add_argument(
        '--backup',
        action='store_true',
        help='Execute engine-backup before upgrade',
    )

    parser.add_argument(
        '--backup-dir',
        nargs=1,
        help='Directory where the engine-backup will save the output\n'
             'If not provided, it will use /tmp',
    )

    logger.debug('----------------------')
    logger.debug('Starting')
    logger.debug('----------------------')

    args = parser.parse_args()

    if args.backup_dir and not args.backup:
        logger.error('The option --backup-dir requires --backup!')
        sys.exit(2)

    c = Subscriptions()

    if args.backup:
        if args.backup_dir is None:
            bkp_dir = tempfile.gettempdir()
        else:
            bkp_dir = ' '.join(args.backup_dir)

    upgrade_supported = False

    u = UpgradeHelper()
    if not u.check_sha256():
        continue_upgrade = sys.stdin.readline().lower().strip()
        if not continue_upgrade or continue_upgrade[0] != "y":
            logger.error("Aborting...")
            sys.exit(0)
    for release in CHECK_RELEASES['repos']:
        version = u.detect_major_version_engine()

        if version not in release['version']:
            continue

        if "4.4" in release['cluster_level_for_next_upgrade']:
            with open('/etc/os-release', 'r') as f:
                for line in f:
                    if "VERSION_ID=" in line:

                        if "." not in line:
                            logger.error("Cannot detect version: os-release")
                            sys.exit(-1)

                        ver_detected = line.replace("VERSION_ID=", "")
                        ver_detected = ver_detected.strip().split(".")[0]
                        ver_detected = ver_detected.replace("\"", "")

                        if ver_detected == "7":
                            logger.error(
                                "Exiting... RHV 4.4 requires upgrading "
                                "operating system to RHEL 8.2 or higher."
                            )
                            sys.exit(-1)
                        elif ver_detected == "8":
                            break

        logger.info(
            "\nDetected RHV version {0}, target upgrade: {1}".format(
                version, release['next_upgrade'])
        )

        continue_upgrade = sys.stdin.readline().lower().strip()
        if not continue_upgrade or continue_upgrade[0] != "y":
            logger.info('Aborting...')
            sys.exit(0)

        if not u.check_cluster_compatibility_for_next_upgrade(
            release['cluster_level_for_next_upgrade']
        ):
            logger.error('Aborting...')
            logger.error(
                "It is not possible to upgrade to {0}, the current"
                " cluster level in the environment is unsupported,"
                " check cluster below:\n".format(
                    release['next_upgrade'])
            )
            print((
                u.show_cluster_not_compatible_for_next_upgrade(
                    release['cluster_level_for_next_upgrade']
                )
            ))
            logger.error(
                "Please check Red Hat Virtualization Manager Comp"
                "atibility Matrix."
            )
            sys.exit(-1)

        if release['version'] == version:
            upgrade_supported = True
            if c.check_rhv_repos(release['version']) is False:
                print((
                    'Are you sure you want to continue? It might generate '
                    'conflicts on RPM dependency. [N/y]'
                ), end=' ')
                continue_upgrade = sys.stdin.readline().lower().strip()
                if not continue_upgrade or continue_upgrade[0] != "y":
                    logger.info('Aborting...')
                    sys.exit(0)

            if args.backup:
                u.run_engine_backup(bkp_dir)

            # If there is no update, engine-upgrade-check return 1
            if u.is_upgrade_available() != 1:
                logger.info("An upgrade is available, upgrading to "
                            "latest {version}.z".format(
                                version=release['version']))

                u.upgrade_engine_setup()

            if u.is_engine_updated() is not True:
                u.run_engine_setup()

            u.update_system()

            c.repository(action='enable', repos=release['repo_to_enable'])
            u.upgrade_engine_setup()
            u.run_engine_setup()

            u.update_system()

            c.repository(action='disable', repos=release['repo_to_disable'])

    if upgrade_supported is False:
        logger.error(
            'Unable to upgrade this environment to {v} version!'.format(
                v=version)
        )
        sys.exit(2)

    logger.info("Please reboot the system to complete the update.")
    logger.info(
        "Once rebooted, please update your hypervisors and change the cluster "
        "and datacenter compatibility level to the latest version.\n"
    )

    return 0


if __name__ == '__main__':

    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGTSTP, signal.SIG_IGN)

    if os.geteuid() != 0:
        sys.exit("User root is required for this program manage "
                 "the subscriptions in this system!")

    _configure_logging()
    sys.exit(main())

# vim: expandtab tabstop=4 shiftwidth=4
